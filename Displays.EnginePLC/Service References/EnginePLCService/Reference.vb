'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On


Namespace EnginePLCService
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"),  _
     System.ServiceModel.ServiceContractAttribute(ConfigurationName:="EnginePLCService.IEnginePLCService", SessionMode:=System.ServiceModel.SessionMode.NotAllowed)>  _
    Public Interface IEnginePLCService
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateFuelOn")>  _
        Sub UpdateFuelOn(ByVal isOn As Boolean)
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateFuelOn")>  _
        Function UpdateFuelOnAsync(ByVal isOn As Boolean) As System.Threading.Tasks.Task
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateManualStart")>  _
        Sub UpdateManualStart(ByVal isOn As Boolean)
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateManualStart")>  _
        Function UpdateManualStartAsync(ByVal isOn As Boolean) As System.Threading.Tasks.Task
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateStartSelectorCrank")>  _
        Sub UpdateStartSelectorCrank()
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateStartSelectorCrank")>  _
        Function UpdateStartSelectorCrankAsync() As System.Threading.Tasks.Task
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateStartSelectorNormal")>  _
        Sub UpdateStartSelectorNormal()
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateStartSelectorNormal")>  _
        Function UpdateStartSelectorNormalAsync() As System.Threading.Tasks.Task
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateStartSelectorIgnitionStart")>  _
        Sub UpdateStartSelectorIgnitionStart()
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateStartSelectorIgnitionStart")>  _
        Function UpdateStartSelectorIgnitionStartAsync() As System.Threading.Tasks.Task
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateStartMasterOn")>  _
        Sub UpdateStartMasterOn(ByVal isOn As Boolean)
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateStartMasterOn")>  _
        Function UpdateStartMasterOnAsync(ByVal isOn As Boolean) As System.Threading.Tasks.Task
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateIgnitionOn")>  _
        Sub UpdateIgnitionOn()
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateIgnitionOn")>  _
        Function UpdateIgnitionOnAsync() As System.Threading.Tasks.Task
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateIgnitionArmed")>  _
        Sub UpdateIgnitionArmed()
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateIgnitionArmed")>  _
        Function UpdateIgnitionArmedAsync() As System.Threading.Tasks.Task
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateIgnitionOff")>  _
        Sub UpdateIgnitionOff()
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateIgnitionOff")>  _
        Function UpdateIgnitionOffAsync() As System.Threading.Tasks.Task
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateGroundPowerOn")>  _
        Sub UpdateGroundPowerOn(ByVal isOn As Boolean)
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateGroundPowerOn")>  _
        Function UpdateGroundPowerOnAsync(ByVal isOn As Boolean) As System.Threading.Tasks.Task
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateEMUPowerOn")>  _
        Sub UpdateEMUPowerOn(ByVal isOn As Boolean)
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateEMUPowerOn")>  _
        Function UpdateEMUPowerOnAsync(ByVal isOn As Boolean) As System.Threading.Tasks.Task
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateIsInFlight")>  _
        Sub UpdateIsInFlight(ByVal isInFlight As Boolean)
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateIsInFlight")>  _
        Function UpdateIsInFlightAsync(ByVal isInFlight As Boolean) As System.Threading.Tasks.Task
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateHighIdle")>  _
        Sub UpdateHighIdle(ByVal isHighIdle As Boolean)
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateHighIdle")>  _
        Function UpdateHighIdleAsync(ByVal isHighIdle As Boolean) As System.Threading.Tasks.Task
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateHydraulicPump1Fitted")>  _
        Sub UpdateHydraulicPump1Fitted(ByVal isFitted As Boolean)
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateHydraulicPump1Fitted")>  _
        Function UpdateHydraulicPump1FittedAsync(ByVal isFitted As Boolean) As System.Threading.Tasks.Task
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateHydraulicPump2Fitted")>  _
        Sub UpdateHydraulicPump2Fitted(ByVal isFitted As Boolean)
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/UpdateHydraulicPump2Fitted")>  _
        Function UpdateHydraulicPump2FittedAsync(ByVal isFitted As Boolean) As System.Threading.Tasks.Task
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/ClearStartReadings")>  _
        Sub ClearStartReadings()
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/ClearStartReadings")>  _
        Function ClearStartReadingsAsync() As System.Threading.Tasks.Task
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/ClearStopReadings")>  _
        Sub ClearStopReadings()
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IEnginePLCService/ClearStopReadings")>  _
        Function ClearStopReadingsAsync() As System.Threading.Tasks.Task
    End Interface
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Public Interface IEnginePLCServiceChannel
        Inherits EnginePLCService.IEnginePLCService, System.ServiceModel.IClientChannel
    End Interface
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class EnginePLCServiceClient
        Inherits System.ServiceModel.ClientBase(Of EnginePLCService.IEnginePLCService)
        Implements EnginePLCService.IEnginePLCService
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String)
            MyBase.New(endpointConfigurationName)
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As String)
            MyBase.New(endpointConfigurationName, remoteAddress)
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(endpointConfigurationName, remoteAddress)
        End Sub
        
        Public Sub New(ByVal binding As System.ServiceModel.Channels.Binding, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(binding, remoteAddress)
        End Sub
        
        Public Sub UpdateFuelOn(ByVal isOn As Boolean) Implements EnginePLCService.IEnginePLCService.UpdateFuelOn
            MyBase.Channel.UpdateFuelOn(isOn)
        End Sub
        
        Public Function UpdateFuelOnAsync(ByVal isOn As Boolean) As System.Threading.Tasks.Task Implements EnginePLCService.IEnginePLCService.UpdateFuelOnAsync
            Return MyBase.Channel.UpdateFuelOnAsync(isOn)
        End Function
        
        Public Sub UpdateManualStart(ByVal isOn As Boolean) Implements EnginePLCService.IEnginePLCService.UpdateManualStart
            MyBase.Channel.UpdateManualStart(isOn)
        End Sub
        
        Public Function UpdateManualStartAsync(ByVal isOn As Boolean) As System.Threading.Tasks.Task Implements EnginePLCService.IEnginePLCService.UpdateManualStartAsync
            Return MyBase.Channel.UpdateManualStartAsync(isOn)
        End Function
        
        Public Sub UpdateStartSelectorCrank() Implements EnginePLCService.IEnginePLCService.UpdateStartSelectorCrank
            MyBase.Channel.UpdateStartSelectorCrank
        End Sub
        
        Public Function UpdateStartSelectorCrankAsync() As System.Threading.Tasks.Task Implements EnginePLCService.IEnginePLCService.UpdateStartSelectorCrankAsync
            Return MyBase.Channel.UpdateStartSelectorCrankAsync
        End Function
        
        Public Sub UpdateStartSelectorNormal() Implements EnginePLCService.IEnginePLCService.UpdateStartSelectorNormal
            MyBase.Channel.UpdateStartSelectorNormal
        End Sub
        
        Public Function UpdateStartSelectorNormalAsync() As System.Threading.Tasks.Task Implements EnginePLCService.IEnginePLCService.UpdateStartSelectorNormalAsync
            Return MyBase.Channel.UpdateStartSelectorNormalAsync
        End Function
        
        Public Sub UpdateStartSelectorIgnitionStart() Implements EnginePLCService.IEnginePLCService.UpdateStartSelectorIgnitionStart
            MyBase.Channel.UpdateStartSelectorIgnitionStart
        End Sub
        
        Public Function UpdateStartSelectorIgnitionStartAsync() As System.Threading.Tasks.Task Implements EnginePLCService.IEnginePLCService.UpdateStartSelectorIgnitionStartAsync
            Return MyBase.Channel.UpdateStartSelectorIgnitionStartAsync
        End Function
        
        Public Sub UpdateStartMasterOn(ByVal isOn As Boolean) Implements EnginePLCService.IEnginePLCService.UpdateStartMasterOn
            MyBase.Channel.UpdateStartMasterOn(isOn)
        End Sub
        
        Public Function UpdateStartMasterOnAsync(ByVal isOn As Boolean) As System.Threading.Tasks.Task Implements EnginePLCService.IEnginePLCService.UpdateStartMasterOnAsync
            Return MyBase.Channel.UpdateStartMasterOnAsync(isOn)
        End Function
        
        Public Sub UpdateIgnitionOn() Implements EnginePLCService.IEnginePLCService.UpdateIgnitionOn
            MyBase.Channel.UpdateIgnitionOn
        End Sub
        
        Public Function UpdateIgnitionOnAsync() As System.Threading.Tasks.Task Implements EnginePLCService.IEnginePLCService.UpdateIgnitionOnAsync
            Return MyBase.Channel.UpdateIgnitionOnAsync
        End Function
        
        Public Sub UpdateIgnitionArmed() Implements EnginePLCService.IEnginePLCService.UpdateIgnitionArmed
            MyBase.Channel.UpdateIgnitionArmed
        End Sub
        
        Public Function UpdateIgnitionArmedAsync() As System.Threading.Tasks.Task Implements EnginePLCService.IEnginePLCService.UpdateIgnitionArmedAsync
            Return MyBase.Channel.UpdateIgnitionArmedAsync
        End Function
        
        Public Sub UpdateIgnitionOff() Implements EnginePLCService.IEnginePLCService.UpdateIgnitionOff
            MyBase.Channel.UpdateIgnitionOff
        End Sub
        
        Public Function UpdateIgnitionOffAsync() As System.Threading.Tasks.Task Implements EnginePLCService.IEnginePLCService.UpdateIgnitionOffAsync
            Return MyBase.Channel.UpdateIgnitionOffAsync
        End Function
        
        Public Sub UpdateGroundPowerOn(ByVal isOn As Boolean) Implements EnginePLCService.IEnginePLCService.UpdateGroundPowerOn
            MyBase.Channel.UpdateGroundPowerOn(isOn)
        End Sub
        
        Public Function UpdateGroundPowerOnAsync(ByVal isOn As Boolean) As System.Threading.Tasks.Task Implements EnginePLCService.IEnginePLCService.UpdateGroundPowerOnAsync
            Return MyBase.Channel.UpdateGroundPowerOnAsync(isOn)
        End Function
        
        Public Sub UpdateEMUPowerOn(ByVal isOn As Boolean) Implements EnginePLCService.IEnginePLCService.UpdateEMUPowerOn
            MyBase.Channel.UpdateEMUPowerOn(isOn)
        End Sub
        
        Public Function UpdateEMUPowerOnAsync(ByVal isOn As Boolean) As System.Threading.Tasks.Task Implements EnginePLCService.IEnginePLCService.UpdateEMUPowerOnAsync
            Return MyBase.Channel.UpdateEMUPowerOnAsync(isOn)
        End Function
        
        Public Sub UpdateIsInFlight(ByVal isInFlight As Boolean) Implements EnginePLCService.IEnginePLCService.UpdateIsInFlight
            MyBase.Channel.UpdateIsInFlight(isInFlight)
        End Sub
        
        Public Function UpdateIsInFlightAsync(ByVal isInFlight As Boolean) As System.Threading.Tasks.Task Implements EnginePLCService.IEnginePLCService.UpdateIsInFlightAsync
            Return MyBase.Channel.UpdateIsInFlightAsync(isInFlight)
        End Function
        
        Public Sub UpdateHighIdle(ByVal isHighIdle As Boolean) Implements EnginePLCService.IEnginePLCService.UpdateHighIdle
            MyBase.Channel.UpdateHighIdle(isHighIdle)
        End Sub
        
        Public Function UpdateHighIdleAsync(ByVal isHighIdle As Boolean) As System.Threading.Tasks.Task Implements EnginePLCService.IEnginePLCService.UpdateHighIdleAsync
            Return MyBase.Channel.UpdateHighIdleAsync(isHighIdle)
        End Function
        
        Public Sub UpdateHydraulicPump1Fitted(ByVal isFitted As Boolean) Implements EnginePLCService.IEnginePLCService.UpdateHydraulicPump1Fitted
            MyBase.Channel.UpdateHydraulicPump1Fitted(isFitted)
        End Sub
        
        Public Function UpdateHydraulicPump1FittedAsync(ByVal isFitted As Boolean) As System.Threading.Tasks.Task Implements EnginePLCService.IEnginePLCService.UpdateHydraulicPump1FittedAsync
            Return MyBase.Channel.UpdateHydraulicPump1FittedAsync(isFitted)
        End Function
        
        Public Sub UpdateHydraulicPump2Fitted(ByVal isFitted As Boolean) Implements EnginePLCService.IEnginePLCService.UpdateHydraulicPump2Fitted
            MyBase.Channel.UpdateHydraulicPump2Fitted(isFitted)
        End Sub
        
        Public Function UpdateHydraulicPump2FittedAsync(ByVal isFitted As Boolean) As System.Threading.Tasks.Task Implements EnginePLCService.IEnginePLCService.UpdateHydraulicPump2FittedAsync
            Return MyBase.Channel.UpdateHydraulicPump2FittedAsync(isFitted)
        End Function
        
        Public Sub ClearStartReadings() Implements EnginePLCService.IEnginePLCService.ClearStartReadings
            MyBase.Channel.ClearStartReadings
        End Sub
        
        Public Function ClearStartReadingsAsync() As System.Threading.Tasks.Task Implements EnginePLCService.IEnginePLCService.ClearStartReadingsAsync
            Return MyBase.Channel.ClearStartReadingsAsync
        End Function
        
        Public Sub ClearStopReadings() Implements EnginePLCService.IEnginePLCService.ClearStopReadings
            MyBase.Channel.ClearStopReadings
        End Sub
        
        Public Function ClearStopReadingsAsync() As System.Threading.Tasks.Task Implements EnginePLCService.IEnginePLCService.ClearStopReadingsAsync
            Return MyBase.Channel.ClearStopReadingsAsync
        End Function
    End Class
End Namespace
